// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entity "questionnaire-bot/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockUsecase is an autogenerated mock type for the Usecase type
type MockUsecase struct {
	mock.Mock
}

type MockUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecase) EXPECT() *MockUsecase_Expecter {
	return &MockUsecase_Expecter{mock: &_m.Mock}
}

// CreateEmail provides a mock function with given fields: _a0
func (_m *MockUsecase) CreateEmail(_a0 *entity.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_CreateEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEmail'
type MockUsecase_CreateEmail_Call struct {
	*mock.Call
}

// CreateEmail is a helper method to define mock.On call
//   - _a0 *entity.User
func (_e *MockUsecase_Expecter) CreateEmail(_a0 interface{}) *MockUsecase_CreateEmail_Call {
	return &MockUsecase_CreateEmail_Call{Call: _e.mock.On("CreateEmail", _a0)}
}

func (_c *MockUsecase_CreateEmail_Call) Run(run func(_a0 *entity.User)) *MockUsecase_CreateEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.User))
	})
	return _c
}

func (_c *MockUsecase_CreateEmail_Call) Return(_a0 error) *MockUsecase_CreateEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_CreateEmail_Call) RunAndReturn(run func(*entity.User) error) *MockUsecase_CreateEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetEmailsByStatus provides a mock function with given fields: _a0
func (_m *MockUsecase) GetEmailsByStatus(_a0 string) ([]entity.Email, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailsByStatus")
	}

	var r0 []entity.Email
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.Email, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.Email); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Email)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsecase_GetEmailsByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEmailsByStatus'
type MockUsecase_GetEmailsByStatus_Call struct {
	*mock.Call
}

// GetEmailsByStatus is a helper method to define mock.On call
//   - _a0 string
func (_e *MockUsecase_Expecter) GetEmailsByStatus(_a0 interface{}) *MockUsecase_GetEmailsByStatus_Call {
	return &MockUsecase_GetEmailsByStatus_Call{Call: _e.mock.On("GetEmailsByStatus", _a0)}
}

func (_c *MockUsecase_GetEmailsByStatus_Call) Run(run func(_a0 string)) *MockUsecase_GetEmailsByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUsecase_GetEmailsByStatus_Call) Return(_a0 []entity.Email, _a1 error) *MockUsecase_GetEmailsByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsecase_GetEmailsByStatus_Call) RunAndReturn(run func(string) ([]entity.Email, error)) *MockUsecase_GetEmailsByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: _a0
func (_m *MockUsecase) GetUser(_a0 int64) (*entity.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsecase_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUsecase_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - _a0 int64
func (_e *MockUsecase_Expecter) GetUser(_a0 interface{}) *MockUsecase_GetUser_Call {
	return &MockUsecase_GetUser_Call{Call: _e.mock.On("GetUser", _a0)}
}

func (_c *MockUsecase_GetUser_Call) Run(run func(_a0 int64)) *MockUsecase_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockUsecase_GetUser_Call) Return(_a0 *entity.User, _a1 error) *MockUsecase_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsecase_GetUser_Call) RunAndReturn(run func(int64) (*entity.User, error)) *MockUsecase_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersForNotify provides a mock function with no fields
func (_m *MockUsecase) GetUsersForNotify() ([]entity.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsersForNotify")
	}

	var r0 []entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsecase_GetUsersForNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersForNotify'
type MockUsecase_GetUsersForNotify_Call struct {
	*mock.Call
}

// GetUsersForNotify is a helper method to define mock.On call
func (_e *MockUsecase_Expecter) GetUsersForNotify() *MockUsecase_GetUsersForNotify_Call {
	return &MockUsecase_GetUsersForNotify_Call{Call: _e.mock.On("GetUsersForNotify")}
}

func (_c *MockUsecase_GetUsersForNotify_Call) Run(run func()) *MockUsecase_GetUsersForNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUsecase_GetUsersForNotify_Call) Return(_a0 []entity.User, _a1 error) *MockUsecase_GetUsersForNotify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsecase_GetUsersForNotify_Call) RunAndReturn(run func() ([]entity.User, error)) *MockUsecase_GetUsersForNotify_Call {
	_c.Call.Return(run)
	return _c
}

// SaveAnswer provides a mock function with given fields: _a0
func (_m *MockUsecase) SaveAnswer(_a0 *entity.Answer) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveAnswer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Answer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_SaveAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveAnswer'
type MockUsecase_SaveAnswer_Call struct {
	*mock.Call
}

// SaveAnswer is a helper method to define mock.On call
//   - _a0 *entity.Answer
func (_e *MockUsecase_Expecter) SaveAnswer(_a0 interface{}) *MockUsecase_SaveAnswer_Call {
	return &MockUsecase_SaveAnswer_Call{Call: _e.mock.On("SaveAnswer", _a0)}
}

func (_c *MockUsecase_SaveAnswer_Call) Run(run func(_a0 *entity.Answer)) *MockUsecase_SaveAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Answer))
	})
	return _c
}

func (_c *MockUsecase_SaveAnswer_Call) Return(_a0 error) *MockUsecase_SaveAnswer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_SaveAnswer_Call) RunAndReturn(run func(*entity.Answer) error) *MockUsecase_SaveAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUser provides a mock function with given fields: _a0
func (_m *MockUsecase) SaveUser(_a0 *entity.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_SaveUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUser'
type MockUsecase_SaveUser_Call struct {
	*mock.Call
}

// SaveUser is a helper method to define mock.On call
//   - _a0 *entity.User
func (_e *MockUsecase_Expecter) SaveUser(_a0 interface{}) *MockUsecase_SaveUser_Call {
	return &MockUsecase_SaveUser_Call{Call: _e.mock.On("SaveUser", _a0)}
}

func (_c *MockUsecase_SaveUser_Call) Run(run func(_a0 *entity.User)) *MockUsecase_SaveUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.User))
	})
	return _c
}

func (_c *MockUsecase_SaveUser_Call) Return(_a0 error) *MockUsecase_SaveUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_SaveUser_Call) RunAndReturn(run func(*entity.User) error) *MockUsecase_SaveUser_Call {
	_c.Call.Return(run)
	return _c
}

// SendEmail provides a mock function with given fields: _a0
func (_m *MockUsecase) SendEmail(_a0 *entity.Email) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Email) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type MockUsecase_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - _a0 *entity.Email
func (_e *MockUsecase_Expecter) SendEmail(_a0 interface{}) *MockUsecase_SendEmail_Call {
	return &MockUsecase_SendEmail_Call{Call: _e.mock.On("SendEmail", _a0)}
}

func (_c *MockUsecase_SendEmail_Call) Run(run func(_a0 *entity.Email)) *MockUsecase_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Email))
	})
	return _c
}

func (_c *MockUsecase_SendEmail_Call) Return(_a0 error) *MockUsecase_SendEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_SendEmail_Call) RunAndReturn(run func(*entity.Email) error) *MockUsecase_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEmailStatus provides a mock function with given fields: _a0, _a1
func (_m *MockUsecase) UpdateEmailStatus(_a0 *entity.Email, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmailStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Email, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUsecase_UpdateEmailStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEmailStatus'
type MockUsecase_UpdateEmailStatus_Call struct {
	*mock.Call
}

// UpdateEmailStatus is a helper method to define mock.On call
//   - _a0 *entity.Email
//   - _a1 string
func (_e *MockUsecase_Expecter) UpdateEmailStatus(_a0 interface{}, _a1 interface{}) *MockUsecase_UpdateEmailStatus_Call {
	return &MockUsecase_UpdateEmailStatus_Call{Call: _e.mock.On("UpdateEmailStatus", _a0, _a1)}
}

func (_c *MockUsecase_UpdateEmailStatus_Call) Run(run func(_a0 *entity.Email, _a1 string)) *MockUsecase_UpdateEmailStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Email), args[1].(string))
	})
	return _c
}

func (_c *MockUsecase_UpdateEmailStatus_Call) Return(_a0 error) *MockUsecase_UpdateEmailStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecase_UpdateEmailStatus_Call) RunAndReturn(run func(*entity.Email, string) error) *MockUsecase_UpdateEmailStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsecase creates a new instance of MockUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecase {
	mock := &MockUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
