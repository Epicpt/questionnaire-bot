// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// MockTelegram is an autogenerated mock type for the Telegram type
type MockTelegram struct {
	mock.Mock
}

type MockTelegram_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTelegram) EXPECT() *MockTelegram_Expecter {
	return &MockTelegram_Expecter{mock: &_m.Mock}
}

// GetUpdatesChan provides a mock function with given fields: _a0
func (_m *MockTelegram) GetUpdatesChan(_a0 tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUpdatesChan")
	}

	var r0 tgbotapi.UpdatesChannel
	if rf, ok := ret.Get(0).(func(tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tgbotapi.UpdatesChannel)
		}
	}

	return r0
}

// MockTelegram_GetUpdatesChan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdatesChan'
type MockTelegram_GetUpdatesChan_Call struct {
	*mock.Call
}

// GetUpdatesChan is a helper method to define mock.On call
//   - _a0 tgbotapi.UpdateConfig
func (_e *MockTelegram_Expecter) GetUpdatesChan(_a0 interface{}) *MockTelegram_GetUpdatesChan_Call {
	return &MockTelegram_GetUpdatesChan_Call{Call: _e.mock.On("GetUpdatesChan", _a0)}
}

func (_c *MockTelegram_GetUpdatesChan_Call) Run(run func(_a0 tgbotapi.UpdateConfig)) *MockTelegram_GetUpdatesChan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tgbotapi.UpdateConfig))
	})
	return _c
}

func (_c *MockTelegram_GetUpdatesChan_Call) Return(_a0 tgbotapi.UpdatesChannel) *MockTelegram_GetUpdatesChan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTelegram_GetUpdatesChan_Call) RunAndReturn(run func(tgbotapi.UpdateConfig) tgbotapi.UpdatesChannel) *MockTelegram_GetUpdatesChan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessage provides a mock function with given fields: _a0, _a1
func (_m *MockTelegram) NewMessage(_a0 int64, _a1 string) tgbotapi.MessageConfig {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NewMessage")
	}

	var r0 tgbotapi.MessageConfig
	if rf, ok := ret.Get(0).(func(int64, string) tgbotapi.MessageConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tgbotapi.MessageConfig)
	}

	return r0
}

// MockTelegram_NewMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewMessage'
type MockTelegram_NewMessage_Call struct {
	*mock.Call
}

// NewMessage is a helper method to define mock.On call
//   - _a0 int64
//   - _a1 string
func (_e *MockTelegram_Expecter) NewMessage(_a0 interface{}, _a1 interface{}) *MockTelegram_NewMessage_Call {
	return &MockTelegram_NewMessage_Call{Call: _e.mock.On("NewMessage", _a0, _a1)}
}

func (_c *MockTelegram_NewMessage_Call) Run(run func(_a0 int64, _a1 string)) *MockTelegram_NewMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockTelegram_NewMessage_Call) Return(_a0 tgbotapi.MessageConfig) *MockTelegram_NewMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTelegram_NewMessage_Call) RunAndReturn(run func(int64, string) tgbotapi.MessageConfig) *MockTelegram_NewMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewUpdate provides a mock function with given fields: _a0
func (_m *MockTelegram) NewUpdate(_a0 int) tgbotapi.UpdateConfig {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NewUpdate")
	}

	var r0 tgbotapi.UpdateConfig
	if rf, ok := ret.Get(0).(func(int) tgbotapi.UpdateConfig); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tgbotapi.UpdateConfig)
	}

	return r0
}

// MockTelegram_NewUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewUpdate'
type MockTelegram_NewUpdate_Call struct {
	*mock.Call
}

// NewUpdate is a helper method to define mock.On call
//   - _a0 int
func (_e *MockTelegram_Expecter) NewUpdate(_a0 interface{}) *MockTelegram_NewUpdate_Call {
	return &MockTelegram_NewUpdate_Call{Call: _e.mock.On("NewUpdate", _a0)}
}

func (_c *MockTelegram_NewUpdate_Call) Run(run func(_a0 int)) *MockTelegram_NewUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockTelegram_NewUpdate_Call) Return(_a0 tgbotapi.UpdateConfig) *MockTelegram_NewUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTelegram_NewUpdate_Call) RunAndReturn(run func(int) tgbotapi.UpdateConfig) *MockTelegram_NewUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: _a0
func (_m *MockTelegram) Send(_a0 tgbotapi.Chattable) (tgbotapi.Message, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 tgbotapi.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) (tgbotapi.Message, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(tgbotapi.Chattable) tgbotapi.Message); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tgbotapi.Message)
	}

	if rf, ok := ret.Get(1).(func(tgbotapi.Chattable) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTelegram_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockTelegram_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - _a0 tgbotapi.Chattable
func (_e *MockTelegram_Expecter) Send(_a0 interface{}) *MockTelegram_Send_Call {
	return &MockTelegram_Send_Call{Call: _e.mock.On("Send", _a0)}
}

func (_c *MockTelegram_Send_Call) Run(run func(_a0 tgbotapi.Chattable)) *MockTelegram_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(tgbotapi.Chattable))
	})
	return _c
}

func (_c *MockTelegram_Send_Call) Return(_a0 tgbotapi.Message, _a1 error) *MockTelegram_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTelegram_Send_Call) RunAndReturn(run func(tgbotapi.Chattable) (tgbotapi.Message, error)) *MockTelegram_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTelegram creates a new instance of MockTelegram. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTelegram(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTelegram {
	mock := &MockTelegram{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
